#include <cstdlib>
#include <cmath>
#include <cstdio>
#include <complex>
#include <armadillo>

const double PI=4.0*atan(1.0);
const double HBARC=197.3269602;

using namespace std;

class CCoshExpand{
public:
	int nmax;
	CCoshExpand(int nmaxset);
	double GetG(int n,double eta);
	arma::mat a;
};
double CCoshExpand::GetG(int n,double eta){
	double x,g;
	int m;
	x=cosh(eta);
	g=0.0;
	for(m=0;m<=n;m++){
		g+=a(n,m)*pow(x,-m-1);
	}
	return g;
}

double dumbfunc(double eta){
	return exp(-0.5*eta*eta)-exp(-eta*eta);
}

CCoshExpand::CCoshExpand(int nmaxset){
	nmax=nmaxset;
	arma::mat K;
	arma::vec x,y,I;
	int n,nprime,m,mprime;
	double norm,overlap;
	I.resize(2*nmax+2);
	I(0)=0.5*PI;
	I(1)=1.0;
	for(n=2;n<=2*nmax+1;n++)
		I(n)=I(n-2)*double(n-1)/double(n);
	a.resize(nmax+1,nmax+1);
	a.zeros();
	a(0,0)=1.0;
	for(n=1;n<=nmax;n++){
		a(n,n)=1.0;
		K.resize(n,n);
		x.resize(n);
		y.resize(n);
		for(nprime=0;nprime<n;nprime++){
			for(m=0;m<n;m++){
				K(nprime,m)=0.0;
				for(mprime=0;mprime<n;mprime++){
					K(nprime,m)+=I(m+mprime+1)*a(nprime,mprime);
				}
			}
		}
		for(nprime=0;nprime<n;nprime++){
			y(nprime)=0.0;
			for(mprime=0;mprime<=nprime;mprime++)
				y(nprime)+=I(n+mprime+1)*a(nprime,mprime);
		}
		
		arma::solve(x,K,y);
		for(m=0;m<n;m++)
			a(n,m)=-x(m);
		a(n,n)=1.0;
		
	}
	for(n=0;n<=nmax;n++){
		norm=0.0;
		for(m=0;m<=n;m++){
			for(mprime=0;mprime<=n;mprime++){
				norm+=a(n,m)*a(n,mprime)*I(m+mprime+1);
			}
		}
		for(m=0;m<=n;m++)
			a(n,m)=a(n,m)/sqrt(norm);
	}
	a.print();
	printf("----------------------------\n");
}

int main(int argc,char *argv[]){
v	const int N=12;
	int n,nprime;
	double eta,deta=0.0005;
	CCoshExpand coshexpand(N);

	// test overlap
	double overlap,g,gprime;
	for(n=0;n<7;n++){
		for(nprime=0;nprime<7;nprime++){
			overlap=0.0;
			for(eta=0.5*deta;eta<25;eta+=deta){
				g=coshexpand.GetG(n,eta);
				gprime=coshexpand.GetG(nprime,eta);
				overlap+=g*gprime*deta;
			}
			if(abs(overlap)<5.0E-7)
				overlap=0.0;
			printf("overlap(%d,%d)=%g\n",n,nprime,overlap);
		}
	}
	
	arma::vec c(N+1);
	for(n=0;n<=N;n++){
		c(n)=0.0;
		for(eta=0.5*deta;eta<25;eta+=deta){
			c(n)+=dumbfunc(eta)*coshexpand.GetG(n,eta)*deta;
		}
	}
	double dumbo;
	for(eta=0.05;eta<2.5;eta+=0.1){
		dumbo=0.0;
		for(n=0;n<=N;n++){
			dumbo+=c(n)*coshexpand.GetG(n,eta);
		}
		printf("%4.2f %g =? %g\n",eta,dumbo,dumbfunc(eta));
	}
	
	return 0;
}


