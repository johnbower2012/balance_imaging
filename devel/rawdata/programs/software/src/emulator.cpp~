#include "emulator.h"

void AddOnesColumn(Eigen::MatrixXd matrix, Eigen::MatrixXd &outMatrix){
  int rows = matrix.rows(),
    cols = matrix.cols();
  outMatrix = Eigen::MatrixXd::Zero(rows,cols+1);
  for(int row=0;row<rows;row++){
    outMatrix(row,0) = 1.0;
    for(int col=0;col<cols;col++){
      outMatrix(row,col+1) = matrix(row,col);
    }
  }
}

///////////////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////////////


CGaussianProcess::CGaussianProcess(){
}
CGaussianProcess::CGaussianProcess(Eigen::MatrixXd newX, Eigen::MatrixXd newY, CParameterMap MAP){
  this->Epsilon = MAP.getD("EPSILON",1e-8);
  this->SigmaF = MAP.getD("SIGMA_F",0.5);
  this->CharacLength = MAP.getD("CHARAC_LENGTH",0.45);
  this->SigmaNoise = MAP.getD("SIGMA_NOISE",0.05);

  this->X = newX;
  this->Y = newY;

  this->trainPoints = this->X.rows();
  this->paramCount = this->X.cols();
  this->obsCount = this->Y.cols();

  this->ConstructHyperparameters();
  this->ConstructBeta();

  this->Noise = this->Hyperparameters.col(this->hyperparamCount - 1);

  Eigen::MatrixXd trainI = Eigen::MatrixXd::Identity(trainPoints, trainPoints);

  this->Kernel = std::vector<Eigen::MatrixXd>(obsCount);
  this->KernelInv = std::vector<Eigen::MatrixXd>(obsCount);
  this->HMatrix = std::vector<Eigen::MatrixXd>(obsCount);
  for(int ob=0;ob<obsCount;ob++){
    this->Kernel[ob] = this->KernelFunction(this->X,this->X,ob);
    this->Kernel[ob] += trainI*(this->Noise(ob)*this->Noise(ob) + this->Epsilon);
    this->KernelInv[ob] = this->Kernel[ob].inverse();
    this->HMatrix[ob] = RegressionLinearFunction(this->X, ob);
  }
}
CGaussianProcess::CGaussianProcess(Eigen::MatrixXd newX, Eigen::MatrixXd newY, std::string filename){
  CParameterMap MAP;
  MAP.ReadParsFromFile(filename);

  this->Epsilon = MAP.getD("EPSILON",1e-8);
  this->SigmaF = MAP.getD("SIGMA_F",0.5);
  this->CharacLength = MAP.getD("CHARAC_LENGTH",0.45);
  this->SigmaNoise = MAP.getD("SIGMA_NOISE",0.05);

  this->X = newX;
  this->Y = newY;

  this->trainPoints = this->X.rows();
  this->paramCount = this->X.cols();
  this->obsCount = this->Y.cols();

  this->ConstructHyperparameters();
  this->ConstructBeta();
  this->Noise = this->Hyperparameters.col(this->hyperparamCount - 1);

  Eigen::MatrixXd trainI = Eigen::MatrixXd::Identity(trainPoints, trainPoints);

  this->Kernel = std::vector<Eigen::MatrixXd>(obsCount);
  this->KernelInv = std::vector<Eigen::MatrixXd>(obsCount);
  this->HMatrix = std::vector<Eigen::MatrixXd>(obsCount);
  for(int ob=0;ob<obsCount;ob++){
    this->Kernel[ob] = this->KernelFunction(this->X,this->X,ob);
    this->Kernel[ob] += trainI*(this->Noise(ob)*this->Noise(ob) + this->Epsilon);
    this->KernelInv[ob] = this->Kernel[ob].inverse();
    this->HMatrix[ob] = RegressionLinearFunction(this->X, ob);
  }
}

///////////////////////////////////////////////////////////////////////////////////////

void CGaussianProcess::Construct(Eigen::MatrixXd newX, Eigen::MatrixXd newY, CParameterMap MAP){
  this->Epsilon = MAP.getD("EPSILON",1e-8);
  this->SigmaF = MAP.getD("SIGMA_F",0.5);
  this->CharacLength = MAP.getD("CHARAC_LENGTH",0.45);
  this->SigmaNoise = MAP.getD("SIGMA_NOISE",0.05);

  this->X = newX;
  this->Y = newY;

  this->trainPoints = this->X.rows();
  this->paramCount = this->X.cols();
  this->obsCount = this->Y.cols();

  this->ConstructHyperparameters();
  this->ConstructBeta();
  this->Noise = this->Hyperparameters.col(this->hyperparamCount - 1);

  Eigen::MatrixXd trainI = Eigen::MatrixXd::Identity(trainPoints, trainPoints);

  this->Kernel = std::vector<Eigen::MatrixXd>(obsCount);
  this->KernelInv = std::vector<Eigen::MatrixXd>(obsCount);
  this->HMatrix = std::vector<Eigen::MatrixXd>(obsCount);
  for(int ob=0;ob<obsCount;ob++){
    this->Kernel[ob] = this->KernelFunction(this->X,this->X,ob);
    this->Kernel[ob] += trainI*(this->Noise(ob)*this->Noise(ob) + this->Epsilon);
    this->KernelInv[ob] = this->Kernel[ob].inverse();
    this->HMatrix[ob] = RegressionLinearFunction(this->X, ob);
  }
}
void CGaussianProcess::Construct(Eigen::MatrixXd newX, Eigen::MatrixXd newY, std::string filename){
  CParameterMap MAP;
  MAP.ReadParsFromFile(filename);

  this->Epsilon = MAP.getD("EPSILON",1e-8);
  this->SigmaF = MAP.getD("SIGMA_F",0.5);
  this->CharacLength = MAP.getD("CHARAC_LENGTH",0.45);
  this->SigmaNoise = MAP.getD("SIGMA_NOISE",0.05);

  this->X = newX;
  this->Y = newY;

  this->trainPoints = this->X.rows();
  this->paramCount = this->X.cols();
  this->obsCount = this->Y.cols();

  this->ConstructHyperparameters();
  this->ConstructBeta();
  this->Noise = this->Hyperparameters.col(this->hyperparamCount - 1);

  Eigen::MatrixXd trainI = Eigen::MatrixXd::Identity(trainPoints, trainPoints);

  this->Kernel = std::vector<Eigen::MatrixXd>(obsCount);
  this->KernelInv = std::vector<Eigen::MatrixXd>(obsCount);
  this->HMatrix = std::vector<Eigen::MatrixXd>(obsCount);
  for(int ob=0;ob<obsCount;ob++){
    this->Kernel[ob] = this->KernelFunction(this->X,this->X,ob);
    this->Kernel[ob] += trainI*(this->Noise(ob)*this->Noise(ob) + this->Epsilon);
    this->KernelInv[ob] = this->Kernel[ob].inverse();
    this->HMatrix[ob] = RegressionLinearFunction(this->X, ob);
  }
}
void CGaussianProcess::ConstructHyperparameters(){
  int rows = this->Y.rows(),
    cols = this->Y.cols();
  this->Hyperparameters = Eigen::MatrixXd::Zero(cols,3);
  for(int col=0;col<cols;col++){
      Hyperparameters(col,0) = this->SigmaF*(this->Y.col(col).maxCoeff() - this->Y.col(col).minCoeff());
      Hyperparameters(col,1) = this->CharacLength;
      Hyperparameters(col,2) = this->SigmaNoise*Hyperparameters(col,0);
  }
  this->hyperparamCount = this->Hyperparameters.cols();
}
void CGaussianProcess::ConstructBeta(){
  this->Beta = Eigen::MatrixXd::Zero(this->obsCount,this->paramCount+1); 

  Eigen::MatrixXd
    temp = Eigen::MatrixXd::Zero(this->paramCount+1,this->paramCount+1),
    X_;
  AddOnesColumn(this->X,X_);
  Eigen::VectorXd beta = Eigen::VectorXd::Zero(this->paramCount);
  Eigen::VectorXd y = Eigen::VectorXd::Zero(this->trainPoints);

  temp = X_.transpose()*X_;
  temp = temp.inverse();
  for(int j=0;j<this->obsCount;j++){
    y = Y.col(j);
    beta = temp*X_.transpose()*y;
    this->Beta.row(j) = beta;
  }
}
Eigen::MatrixXd CGaussianProcess::RegressionLinearFunction(Eigen::MatrixXd testX, int obsIndex){
  int points = testX.rows();
  Eigen::MatrixXd HMat = Eigen::MatrixXd::Zero(1,points);
  for(int i=0;i<points;i++){
    HMat(0,i) = this->Beta(obsIndex,0);
    for(int j=0;j<this->paramCount;j++){
      HMat(0,i) += this->Beta(obsIndex,j+1)*testX(i,j);
    }
  }
  return HMat;
}
Eigen::MatrixXd CGaussianProcess::KernelFunction(Eigen::MatrixXd A, Eigen::MatrixXd B, int obsIndex){
  double xi, xj, sum, diff,
    theta1 = this->Hyperparameters(obsIndex,0)*this->Hyperparameters(obsIndex,0),
    theta2 = 0.5/(this->Hyperparameters(obsIndex,1)*this->Hyperparameters(obsIndex,1));
  int ai = A.rows(),
    bi = B.rows();
  Eigen::MatrixXd KernelMatrix = Eigen::MatrixXd::Zero(ai,bi);

  for(int a=0;a<ai;a++){
    for(int b=0;b<bi;b++){
      sum = 0.0;
      for(int pc=0;pc<this->paramCount;pc++){
	xi = A(a,pc);
	xj = B(b,pc);
	diff = xi - xj;
	sum += diff*diff;
      }
      KernelMatrix(a,b) = theta1*exp(-sum*theta2);
    }
  }
  return KernelMatrix;
}
Eigen::MatrixXd CGaussianProcess::Emulate(Eigen::MatrixXd testX){
  unsigned seed = std::chrono::system_clock::now().time_since_epoch().count();
  std::default_random_engine generator(seed);
  std::normal_distribution<double> dist(0.0,1.0);

  int testPoints = testX.rows();
  //matrices and vectors for computational use
  Eigen::MatrixXd KernelS = Eigen::MatrixXd::Zero(this->trainPoints,testPoints),
    KernelSS = Eigen::MatrixXd::Zero(testPoints,testPoints),
    
    meanMatrix = Eigen::MatrixXd::Zero(testPoints,1),
    varMatrix = Eigen::MatrixXd::Zero(testPoints, testPoints),
    L = Eigen::MatrixXd::Zero(testPoints, testPoints),

    HS = Eigen::MatrixXd::Zero(1, testPoints),
    R = Eigen::MatrixXd::Zero(this->trainPoints, testPoints),
    betaMatrix = Eigen::MatrixXd::Zero(this->trainPoints, 1),

    tempPP = Eigen::MatrixXd::Zero(1,1),
    tempPPInv = Eigen::MatrixXd::Zero(1,1),

    postFunc = Eigen::MatrixXd::Zero(testPoints, 1),
    randomSample = Eigen::MatrixXd::Zero(testPoints, 1),

    testI = Eigen::MatrixXd::Identity(testPoints,testPoints);
  
  //outMatrix = Eigen::MatrixXd::Zero(testPoints,this->paramCount+this->obsCount);
  Eigen::MatrixXd outMatrix;
    outMatrix = Eigen::MatrixXd::Zero(testPoints,this->obsCount);

  for(int ob=0;ob<this->obsCount;ob++){
    KernelS = this->KernelFunction(this->X, testX, ob);
    KernelSS = this->KernelFunction(testX, testX, ob);
    KernelSS += testI*this->Epsilon;

    HS = this->RegressionLinearFunction(testX, ob);
    R = HS - this->HMatrix[ob]*this->KernelInv[ob]*KernelS;
    tempPP = this->HMatrix[ob]*KernelInv[ob]*this->HMatrix[ob].transpose();
    tempPPInv = tempPP.inverse();
    betaMatrix = tempPPInv*this->HMatrix[ob]*this->KernelInv[ob]*this->Y.col(ob);

    meanMatrix = KernelS.transpose()*this->KernelInv[ob]*Y.col(ob) + R.transpose()*betaMatrix;

    //varMatrix = KernelSS - KernelS.transpose()*this->KernelInv[ob]*KernelS + R.transpose()*tempPPInv*R;
    //L = varMatrix.llt().matrixL();
    
    outMatrix.col(ob) = meanMatrix.col(0);
  }
  return outMatrix;
}
Eigen::MatrixXd CGaussianProcess::Emulate_NR(Eigen::MatrixXd testX){
  unsigned seed = std::chrono::system_clock::now().time_since_epoch().count();
  std::default_random_engine generator(seed);
  std::normal_distribution<double> dist(0.0,1.0);

  int testPoints = testX.rows();
  
  //matrices and vectors for computational use
  Eigen::MatrixXd KernelS = Eigen::MatrixXd::Zero(this->trainPoints,testPoints),
    KernelSS = Eigen::MatrixXd::Zero(testPoints,testPoints),
    
    meanMatrix = Eigen::MatrixXd::Zero(testPoints,1),
    varMatrix = Eigen::MatrixXd::Zero(testPoints, testPoints),
    L = Eigen::MatrixXd::Zero(testPoints, testPoints),

    //postFunc = Eigen::MatrixXd::Zero(testPoints, 1),
    //randomSample = Eigen::MatrixXd::Zero(testPoints, 1),

    testI = Eigen::MatrixXd::Identity(testPoints,testPoints);

  Eigen::MatrixXd outMatrix;
    outMatrix = Eigen::MatrixXd::Zero(testPoints,this->obsCount);

  for(int ob=0;ob<obsCount;ob++){
    KernelS = this->KernelFunction(this->X, testX, ob);
    KernelSS = this->KernelFunction(testX, testX, ob);
    KernelSS += testI*this->Epsilon;

    meanMatrix = KernelS.transpose()*this->KernelInv[ob]*Y.col(ob);

    //varMatrix = KernelSS - KernelS.transpose()*this->KernelInv[ob]*KernelS;
    //L = varMatrix.llt().matrixL();
    outMatrix.col(ob) = meanMatrix.col(0);
  }
  return outMatrix;
}
